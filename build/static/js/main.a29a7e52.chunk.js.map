{"version":3,"sources":["Ball.js","LottoBall.js","App.js","serviceWorker.js","index.js"],"names":["Ball","className","this","props","num","Component","LottoBall","state","nums","Array","from","length","numBalls","handleclick","bind","setState","currState","map","n","Math","floor","random","maxNum","generate","title","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAeeA,G,uLAVX,OACA,yBAAKC,UAAU,QACZC,KAAKC,MAAMC,S,GAJCC,cCCbC,G,iBAOL,WAAYH,GAAO,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CAACC,KAAKC,MAAMC,KAAK,CAACC,OAAQ,EAAKR,MAAMS,YAClD,EAAKC,YAAa,EAAKA,YAAYC,KAAjB,gBAHD,E,wEAMP,IAAD,OACTZ,KAAKa,UAAS,SAAAC,GAAS,MAAK,CAC3BR,KAAMQ,EAAUR,KAAKS,KACrB,SAAAC,GAAC,OAAGC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMmB,QAAU,W,oCAKrDpB,KAAKqB,a,+BAGL,OACC,6BAAStB,UAAU,SAClB,gCAAMC,KAAKC,MAAMqB,MAAjB,KACC,6BACEtB,KAAKK,MAAMC,KAAKS,KAAI,SAAAC,GAAC,OAAG,kBAAC,EAAD,CAAMd,IAAKc,QAItC,4BAAQO,QAASvB,KAAKW,aAAtB,6B,GAhCoBR,cAAlBC,EACEoB,aAAc,CACpBF,MAAO,WACPZ,SAAS,EACTU,OAAQ,IAqCKhB,QC3BAqB,G,uLAXX,OACI,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAWuB,MAAO,aAClB,kBAAC,EAAD,CAAWA,MAAO,QAAQZ,SAAU,EAAGU,OAAQ,KAC/C,kBAAC,EAAD,CAAWE,MAAO,eAAeZ,SAAU,EAAGU,OAAQ,U,GAN9CjB,cCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a29a7e52.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Ball.css';\r\n\r\nclass Ball extends Component {\r\n  render(){\r\n    return (\r\n    <div className=\"Ball\" >\r\n      {this.props.num}\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n  \r\n\r\nexport default Ball;","import React, {Component} from 'react';\r\nimport Ball from './Ball';\r\nimport './lotto.css'\r\n\r\nclass LottoBall extends Component {\r\n\tstatic defaultProps ={\r\n\t\ttitle: 'MEGASENA',\r\n\t\tnumBalls:6,\r\n\t\tmaxNum: 60,\r\n\t}\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {nums:Array.from({length: this.props.numBalls})}\r\n\t\tthis.handleclick= this.handleclick.bind(this);\r\n\t}\r\n\r\n\tgenerate(){\r\n\t\tthis.setState(currState => ({\r\n\t\t\tnums: currState.nums.map(\r\n\t\t\tn=> Math.floor(Math.random() * this.props.maxNum) + 1)\r\n\t\t}));\r\n\t}\r\n\r\n\thandleclick(){\r\n\t\tthis.generate();\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<section className=\"Lotto\">\r\n\t\t\t\t<h1> {this.props.title} </h1>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{this.state.nums.map(n=> <Ball num={n}/>)}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t<button onClick={this.handleclick}>NÃºmeros da sorte!</button>\r\n\t\t\t</section>\r\n\r\n\t\t\t);\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LottoBall","import React, {Component} from 'react';\nimport LottoBall from './LottoBall';\nimport './App.css';\nimport './lotto.css';\n\nclass App extends Component {\n  render(){\n    return (\n        <div className=\"App\">\n          <LottoBall title= \"MEGASENA\"/>\n          <LottoBall title= \"QUINA\" numBalls={5} maxNum={80}/>\n          <LottoBall title= \"DIA DE SORTE\" numBalls={7} maxNum={31}/>\n                    \n        </div>  \n     );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}